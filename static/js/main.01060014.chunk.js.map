{"version":3,"sources":["Buttons.js","game.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","router","eventName","label","Error","onClick","this","bind","evt","emit","React","Component","ToggleButton","_on","on","_off","state","removeListener","reset","setState","toggle","Game","rows","cols","length","cells","initialize","flattened","flat","cell","cnt","neighbors","n","row","col","value","idx","rownum","colnum","assignNeighbors","push","r","c","i","filter","rv","count","console","log","changes","apply","Cell","active","inactive","data","clickHandler","nextProps","nextState","className","patterns","join","RegExp","tag","match","EventEmitter","Table","game","toggleInterval","cellClicked","interval","clearInterval","setInterval","advance","map","ckey","key","rkey","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01060014.chunk.js","sourcesContent":["import React from 'react'\n\nexport class Button extends React.Component {\n  \n  constructor( props ) {\n    if( !props.router || !props.eventName || !props.label ) {\n      throw new Error( 'Button requires \"router\", \"eventName\", and \"label\"' )\n    }\n    super( props )\n  }\n\n  render() {\n    return <button onClick={this.onClick.bind(this) }>{this.props.label}</button>\n  }\n\n  onClick( evt ) {\n    this.props.router.emit( this.props.eventName, this.props.label )\n  }\n\n}\n\nexport class ToggleButton extends React.Component {\n\n  constructor(props) {\n     super(props)\n     this._on = { on: true, label: 'Stop' }\n     this._off = { on: false, label: 'Start' }\n     this.state = this._off\n  }\n\n  componentWillUnount() {\n     this.props.router.removeListener( 'reset', this.reset )\n  }\n  componentDidMount() {\n     this.props.router.on( 'reset', this.reset.bind(this) )\n  }\n\n  reset() {\n    this.setState( this._off )\n  }\n\n  render() {\n     return <button onClick={this.toggle.bind(this) }>{this.state.label}</button>\n  }\n\n  componentDidUpdate() {\n    this.props.router && this.props.router.emit( this.props.eventName, this.state.on )\n  }\n\n  toggle() {\n    let state = this.state.on ? this._off : this._on \n    this.setState( state )\n  }\n\n\n}\n","\nclass Game {\n\n  constructor( rows, cols ) {\n      this.rows = rows\n      this.cols = cols\n      this.length = rows * cols\n      this.cells = []\n      this.initialize() \n      this.flattened = this.cells.flat()\n  }\n\n  count( cell ) {\n     let cnt = 0\n     for( let n of cell.neighbors ) {\n       n = this.cells[ n.row ][n.col]\n       if( n.value === 1 ) {\n          cnt += 1\n       }\n     }\n     return cnt\n  }\n\n  initialize() {\n    let idx = 0\n    for( let rownum = 0; rownum < this.rows; ++rownum ) {\n      \n      let row = this.cells[rownum] = [] \n      for( let colnum = 0; colnum < this.cols; ++colnum ) {\n         let cell = { idx: idx++, row: rownum, col: colnum, value: 0 }\n         this.assignNeighbors( cell )\n         row.push( cell )\n      }\n    }\n  }\n\n  assignNeighbors(cell) {\n\n    let r = cell.row\n    let c = cell.col\n    let i = cell.idx\n\n    \n    let neighbors =  [\n      { idx: i, row: r    , col: c - 1 }, // left\n      { idx: i, row: r    , col: c + 1 }, // right\n      { idx: i, row: r - 1, col: c     }, // above\n      { idx: i, row: r - 1, col: c - 1 }, // aboveLeft\n      { idx: i, row: r - 1, col: c + 1 }, // aboveRight\n      { idx: i, row: r + 1, col: c     }, // below\n      { idx: i, row: r + 1, col: c - 1 }, // belowLeft\n      { idx: i, row: r + 1, col: c + 1 }  // belowRight\n    ]\n\n    let filter = cell => (\n      cell.row >= 0 &&\n      cell.row < this.rows &&\n      cell.col >= 0 &&\n      cell.col < this.cols \n    )\n    \n    cell.neighbors = neighbors.filter( filter )\n  }\n\n  changes() {\n     let rv = []\n     for( let cell of this.flattened ) {\n         let cnt = this.count( cell )\n         if( cnt === 3 && cell.value === 0 ) {\n           console.log( 'reviving', cell.row, cell.col )\n           rv.push( { row: cell.row, col: cell.col, value: 1 } )\n           continue\n         }\n         if( cell.value === 1 && ( cnt > 3 || cnt < 2 ) ) {\n           console.log( 'killing', cell.row, cell.col )\n           rv.push( { row: cell.row, col: cell.col, value: 0 } )\n         }\n     }\n    return rv\n  }\n\n  apply( changes ) {\n    let cells = []\n    for( let c of changes ) {\n       let cell = this.cells[c.row][c.col];\n       cell.value = c.value\n       cells.push( cell )\n    }\n    return cells\n  }\n\n  advance() {\n    return this.apply( this.changes() )\n  }\n}\n\nexport default Game\n","import React from 'react'\n\nclass Cell extends React.Component {\n\n  constructor( props ) {\n     super(props)\n     this.active = props.active ? props.active : \"\\u2b24\"\n     this.inactive = props.inactive ? props.inactive : ' '\n     this.value = props.data.value\n     this.onClick = this.clickHandler.bind( this )\n  }\n\n  shouldComponentUpdate( nextProps, nextState ) {\n     return this.value !== nextProps.data.value\n  }\n\n  componentDidUpdate() {\n     console.log( 'Cell didUpdate', this.props.data )\n     this.value = this.props.data.value\n  }\n\n  clickHandler() {\n    this.props.router.emit( 'cell.clicked', this.props.data )\n  }\n\n  render() {\n    let className = this.props.data.value ? 'App-cell active' : 'App-cell inactive'\n    return (\n      <td className={ className } onClick={this.onClick}>\n         { this.props.active ? \"\\u2b24\" : \" \" }\n      </td>\n    )\n  }\n}\n\nexport default Cell\n","import EventEmitter from 'events'\nimport { Button, ToggleButton } from './Buttons'\nimport React  from 'react'\nimport Game from './game'\nimport Cell from './Cell'\nimport './App.css'\n\nclass Router extends EventEmitter {\n\n   constructor( patterns = [] ) {\n      super()\n      \n      if( !patterns.length )\n         return\n\n      this.patterns = patterns.join( ')|(' )\n      this.patterns = new RegExp( `(${this.patterns})` )\n   }\n\n   emit( tag, data ) {\n      super.emit( tag, data )\n      if( this.patterns && tag.match( this.patterns ) )\n         console.log( 'router', tag, data )\n   }\n}\n\nconst router = new Router( [ 'cell.*', 'onoff' ])\n\nclass Table extends React.Component {\n\n\n  constructor( props ) {\n    super( props )\n    this.rows = props.rows\n    this.cols = props.cols\n    this.game = new Game( this.rows, this.cols )\n\n    this.state = { game: this.game, rows: this.rows, cols: this.cols }\n  }\n\n  componentDidMount() {\n    router.on('onoff', this.toggleInterval.bind( this ) )\n    router.on('reset', this.reset.bind( this ) )\n    router.on('cell.clicked', this.cellClicked.bind( this ) )\n  }\n\n  reset() {\n    if( this.interval ) {\n       clearInterval( this.interval )\n       this.interval = null\n    }\n    for( let cell of this.state.game.flattened ) { cell.value = 0 }\n    this.setState( { game: this.game } )\n  }\n\n  cellClicked( cell ) {\n     cell.value = cell.value === 0 ? 1 : 0\n     this.setState( { game: this.game } )\n  }\n\n\n\n  toggleInterval(on) {\n    console.log( 'toggelInterval', on )\n    if( this.interval ) {\n      clearInterval( this.interval )\n      this.interval = null\n    }\n    if( on ) {\n      this.interval = setInterval( () => this.advance(), 1000 )\n    }\n  }\n\n  advance() {\n    let changes = this.game.advance()\n    changes.length && this.setState( { game: this.game } )\n  }\n\n  render() {\n\n    let cells = this.state.game.cells\n\n    let rows = cells.map( (row,rownum) => {\n      let cols = row.map( (col, colnum) => {\n        let ckey = `r${rownum}c${colnum}`\n        return <Cell key={ ckey } router={router} data={col} />\n      })\n      let rkey = `r${rownum}`\n      return <tr key={ rkey } >{cols}</tr>\n    })\n    return (\n        <table><tbody>{rows}</tbody></table>\n    )\n\n  }\n\n}\n\nfunction App(props) {\n\n\n   return (<div className=\"App-container\" > \n      <p>ReactJS isn't a great way to implement Game of Life</p>\n      <p>But Game of LIfe is a great way to learn ReactJS!</p>\n      <p>Click on squares to create a starting pattern</p>\n      <div>&nbsp;</div>\n      <ToggleButton router={router} eventName=\"onoff\" />\n      <Button router={router} eventName=\"reset\" label=\"Reset\"  />\n      <Table rows={30} cols={30} />\n   </div> )\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}